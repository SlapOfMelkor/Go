// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users_queries.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (rol,username,pasword) 
VALUES ($1, $2, $3) RETURNING id, rol, username, pasword
`

type CreateUserParams struct {
	Rol      string `json:"rol"`
	Username string `json:"username"`
	Pasword  string `json:"pasword"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Rol, arg.Username, arg.Pasword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Rol,
		&i.Username,
		&i.Pasword,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, rol, username, pasword FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Rol,
		&i.Username,
		&i.Pasword,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, rol, username, pasword FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Rol,
			&i.Username,
			&i.Pasword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const login = `-- name: Login :one
SELECT rol, username, pasword FROM users WHERE username = $1
`

type LoginRow struct {
	Rol      string `json:"rol"`
	Username string `json:"username"`
	Pasword  string `json:"pasword"`
}

func (q *Queries) Login(ctx context.Context, username string) (LoginRow, error) {
	row := q.db.QueryRowContext(ctx, login, username)
	var i LoginRow
	err := row.Scan(&i.Rol, &i.Username, &i.Pasword)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set username = $2,
  pasword=$3
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Pasword  string `json:"pasword"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Username, arg.Pasword)
	return err
}
