// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: book_queries.sql

package database

import (
	"context"
)

const addBook = `-- name: AddBook :one
INSERT INTO books (title, author, published_date) VALUES ($1, $2, $3) RETURNING id
`

type AddBookParams struct {
	Title         string `json:"title"`
	Author        string `json:"author"`
	PublishedDate string `json:"published_date"`
}

func (q *Queries) AddBook(ctx context.Context, arg AddBookParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, addBook, arg.Title, arg.Author, arg.PublishedDate)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createBooksTable = `-- name: CreateBooksTable :exec

SELECT id, title, author, published_date FROM books
`

func (q *Queries) CreateBooksTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createBooksTable)
	return err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, title, author, published_date FROM books WHERE id = $1
`

func (q *Queries) GetBookByID(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.PublishedDate,
	)
	return i, err
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books SET title = $1, author = $2, published_date = $3 WHERE id = $4
`

type UpdateBookParams struct {
	Title         string `json:"title"`
	Author        string `json:"author"`
	PublishedDate string `json:"published_date"`
	ID            int32  `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook,
		arg.Title,
		arg.Author,
		arg.PublishedDate,
		arg.ID,
	)
	return err
}
